#!/bin/bash

useForm=0
buffer=
path=
readContinuous=0
sleepLen="0.1"

# Parses arguments
while [[ $# -gt 0 ]]; do
	case $1 in
		# Sets the path/device to use for output
		-o|--out)
			path=$2
			shift
			;;
		# Sets the number of seconds to sleep before writing the data
		-s|--sleep)
			sleepLen=$2
			shift
			;;
		# Sets read to continue reading after exiting configuration mode
		-r|--read)
			readContinuous=1
			;;
		# Prints help/usage message
		-h|--help)
			echo "Usage: $0 [ options ]"
			echo "	Multiple options can be concatenated"
			echo "	Unless -o is used, first usb serial device found will be used"
			echo "	Automatically uses -f if -p or -e option was not used"
			echo "OPTIONS:"
			echo "	-h, --help    Prints help information"
			echo "	-r, --read    Reads logs from device until disconnected or terminated"
			echo "	-f, --form    Displays a form for sending configurations to the output"
			echo "	-o, --out     Sets the output file/device to use, requires 1 argument"
			echo "	-p, --path    Sends the content of file to the output, requires 1 argument"
			echo "	-e, --eval    Sends configuration key-value pair to the output, requires 1 argument"
			echo "	-s, --sleep   Sets the delay in seconds before writing data, requires 1 argument"
			exit
			;;
		# Use generator
		-f|--form)
			useForm=1
			;;
		# Uses argument strings as is
		-e|--eval)
			buffer+="$2\n"
			shift
			;;
		# Gets buffer from argument path
		-p|--path)
			buffer+="$(cat $2)\n"
			shift
			;;
		# Rejects invalid commands
		-*)
			echo "Invalid command $1"
			exit
			;;
		# Allows using it in a shebang
		*)
			buffer+="$(cat $1)\n"
			;;
	esac
	shift
done

# Tries to automatically find a serial device if not specified
if [[ -z $path ]]; then
	if [[ $(uname) == "Darwin" ]]; then
		path=`ls /dev/cu.usbserial-* 2>/dev/null | head -1`
	elif [[ $(uname) == "Linux" ]]; then
		path=`ls /dev/ttyUSB* 2> /dev/null | head -1`
	fi
	if [[ -z $path ]]; then
		echo "Unable to auto detect device path"
		exit
	fi
fi

# Defaults to form if eval, path, form, shebang or read were not defined
if [[ $useForm -eq 0 && -z $buffer && $readContinuous -eq 0 ]]; then
	useForm=1
fi

# Creates a new configuration if buffer was not defined or form flag was defined
if [[ $useForm -eq 1 ]]; then
	genIndex=14

	# Sets a trap to escape the form if aborted
	function escapeFormOnExit() {
		printf "\x1b["$genIndex"B"
	}
	trap escapeFormOnExit EXIT

	# Prints property list
	echo "[*] SSID"
	echo "[ ] SSID Passphrase"
	echo "[ ] Host"
	echo "[ ] Port"
	echo "[ ] Path"
	echo "[ ] Project"
	echo "[ ] Project Password"
	echo "[ ] Minimum Speed"
	echo "[ ] Maximum Speed"
	echo "[ ] Deadzone"
	echo "[ ] Calibrate Low"
	echo "[ ] Calibrate High"
	echo "[ ] Sensitivity"
	echo "[ ] Exit"
	printf "< Navigate [ Up/Down ], Start editing / Stop editing [ Enter ] >"
	printf "\r\x1b["$genIndex"A["

	# Lists all configuration items in cli order
	genKeys=( "sensitivity" "calhigh" "callow" "deadzone" "speedmax" "speedmin" "projkey" "proj" "path" "port" "host" "ssidkey" "ssid" )

	# Reads input until exited from interface
	while read -rsn1 key; do
		# Processes input on non escape character
		if [[ $key != $'\x1b' ]]; then
			if [[ $genIndex == 1 ]]; then
				break
			fi

			# Moves to the right of the key
			printf "\x1b[32C: \x1b[K"

			# Prints character if not started with enter key
			if [[ $key != '' ]]; then
				printf $key
			fi

			# Adds input to buffer
			read value
			buffer+=${genKeys[$genIndex-2]}=$key$value'\n'

			# Moves back to selected line
			printf "\x1b[F["

		# Processes escape sequence
		else
			# Ignores non escape sequence character
			read -rsn1 key
			if [[ $key != '[' ]]; then
				continue
			fi

			# Removes indicator for previous line
			printf "\r[ "

			# Processes arrow keys
			read -rsn1 key
			if [[ $key == 'A' && $genIndex -lt 14 ]]; then
				genIndex=$(( $genIndex + 1 ))
				printf "\x1b[A"
			elif [[ $key == 'B' && $genIndex -gt 1 ]]; then
				genIndex=$(( $genIndex - 1 ))
				printf "\x1b[B"
			fi

			# Adds indicator for new line
			printf "\r[*\b"
		fi
	done
	printf '\n\n'

	# Throws on empty buffer
	if [[ -z $buffer ]]; then
		echo "No data to write"
		exit
	fi
fi

# Writes data to device if available
if [[ "$buffer" ]]; then
	# Ensures buffer will exit configuration mode
	buffer+='\n'

	# Writes buffer to device
	sleep $sleepLen; printf "$buffer" > $path &

	# Reads data until configuration mode is exited
	if [[ $readContinuous -eq 0 ]]; then
		LC_ALL=C sed -n '/\[/,//{
			p
			/Configuration/q
		}' $path
		exit
	fi
fi

# Reads data until exited
cat < $path
