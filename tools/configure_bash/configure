#!/bin/bash

useForm=0
hasBuffer=0
buffer=
path=
gotRead=0
sleepLen=1
genState=0
genIndex=13
genArrBuf=()

# Parses arguments
while [[ $# -gt 0 ]]; do
	case $1 in
		# Sets the path/device to use for output
		-o|--out)
			path=$2
			shift
			;;
		# Sets the number of seconds to sleep before writing the data
		-s|--sleep)
			sleepLen=$2
			shift
			;;
		# Sets read to continue reading after exiting configuration mode
		-r|--read)
			gotRead=1
			;;
		# Prints help/usage message
		-h|--help)
			echo "Usage: ./configure [ options ] [ filepath ]"
			echo "	Multiple filepaths and/or options are concatenated"
			echo "	Unless -o is used, first usb serial device found will be used"
			echo "	Automatically uses -f if no filepath or -e option was used"
			echo "OPTIONS:"
			echo "	-h, --help    Prints help information"
			echo "	-r, --read    Reads logs from device until disconnected or terminated"
			echo "	-o, --out     Sets the output file/device to use, requires 1 argument"
			echo "	-f, --form    Displays a form for sending configurations to the output"
			echo "	-e, --eval    Sends configuration key-value pair to the output, requires 1 argument"
			echo "	-s, --sleep   Sets the delay in seconds before writing data, requires 1 argument"
			exit
			;;
		# Use generator
		-f|--form)
			useForm=1
			;;
		# Uses argument strings as is instead of as path
		-e|--eval)
			hasBuffer=1
			buffer+="$2\n"
			shift
			;;
		# Rejects invalid commands
		-*)
			echo "Invalid command" $1
			exit
			;;
		# Gets buffer from argument path or uses it as is after eval
		*)
			hasBuffer=1
			buffer+="$(cat $1)\n"
			;;
	esac
	shift
done

# Tries to automatically find a serial device
if [[ -z $path ]]; then
	if [[ $(uname) == "Darwin" ]]; then
		path=`ls /dev/cu.usbserial-* 2>/dev/null | head -1`
	elif [[ $(uname) == "Linux" ]]; then
		path=`ls /dev/ttyUSB* 2> /dev/null | head -1`
	fi
	if [[ -z $path ]]; then
		echo "Unable to auto detect device path"
		exit
	fi
fi

# Only reads if no data is defined
if [[ $hasBuffer -eq 0 && $gotRead -eq 1 ]]; then
	cat < $path
	exit
fi

# Creates a new configuration if buffer was not defined or form flag was defined
if [[ $useForm -eq 1 || $hasBuffer -eq 0 ]]; then
	echo "Create new configuration:"
	echo "	Navigate with up and down arrow keys"
	echo "	Multiple values can be updated"
	echo "	Press enter key when you are done"
	echo "-----------------------------------"
	echo "[*] SSID"
	echo "[ ] SSID Passphrase"
	echo "[ ] Host"
	echo "[ ] Port"
	echo "[ ] Path"
	echo "[ ] Project"
	echo "[ ] Project Password"
	echo "[ ] Minimum Speed"
	echo "[ ] Maximum Speed"
	echo "[ ] Deadzone"
	echo "[ ] Calibrate Low"
	echo "[ ] Calibrate High"
	echo "[ ] Sensitivity"
	printf "Value: "

	while read -rsn1 key; do
		case $genState in
			0)
				# Starts escape sequence
				if [[ $key == $'\x1b' ]]; then
					genState=1
				# Breaks loop on enter key
				elif [[ $key == '' ]]; then
					break
				# Adds character to buffer
				else
					genArrBuf[$genIndex]+=$key
					printf $key
				fi
				;;
			1)
				# Continues escape sequence
				if [[ $key == '[' ]]; then
					genState=2
				fi
				;;
			2)
				# Removes indicator for previous line
				printf "\r\x1b["$genIndex"A"
				printf "[ \r"
				printf "\x1b["$genIndex"B"

				# Processes arrow keys
				if [[ $key == 'A' && $genIndex -lt 13 ]]; then
					genIndex=$(( $genIndex + 1 ))
				elif [[ $key == 'B' && $genIndex -gt 1 ]]; then
					genIndex=$(( $genIndex - 1 ))
				fi

				# Adds indicator for new line
				printf "\x1b["$genIndex"A"
				printf "[*\n"
				printf "\x1b["$genIndex"B"

				# Prints current buffer
				printf "\x1b[7C"
				if [[ -n "${genArrBuf[$genIndex]}" ]]; then
					printf ${genArrBuf[$genIndex]}
				fi
				printf "\x1b[K"

				# Resets state
				genState=0
				;;
		esac
	done
	printf '\n'

	# Adds to buffer
	if [[ -n ${genArrBuf[13]} ]]; then
		buffer+="ssid="${genArrBuf[13]}'\n'
	fi
	if [[ -n ${genArrBuf[12]} ]]; then
		buffer+="ssidkey="${genArrBuf[12]}'\n'
	fi
	if [[ -n ${genArrBuf[11]} ]]; then
		buffer+="host="${genArrBuf[11]}'\n'
	fi
	if [[ -n ${genArrBuf[10]} ]]; then
		buffer+="port="${genArrBuf[10]}'\n'
	fi
	if [[ -n ${genArrBuf[9]} ]]; then
		buffer+="path="${genArrBuf[9]}'\n'
	fi
	if [[ -n ${genArrBuf[8]} ]]; then
		buffer+="proj="${genArrBuf[8]}'\n'
	fi
	if [[ -n ${genArrBuf[7]} ]]; then
		buffer+="projkey="${genArrBuf[7]}'\n'
	fi
	if [[ -n ${genArrBuf[6]} ]]; then
		buffer+="speedmin="${genArrBuf[6]}'\n'
	fi
	if [[ -n ${genArrBuf[5]} ]]; then
		buffer+="speedmax="${genArrBuf[5]}'\n'
	fi
	if [[ -n ${genArrBuf[4]} ]]; then
		buffer+="deadzone="${genArrBuf[4]}'\n'
	fi
	if [[ -n ${genArrBuf[3]} ]]; then
		buffer+="callow="${genArrBuf[3]}'\n'
	fi
	if [[ -n ${genArrBuf[2]} ]]; then
		buffer+="calhigh="${genArrBuf[2]}'\n'
	fi
	if [[ -n ${genArrBuf[1]} ]]; then
		buffer+="sensitivity="${genArrBuf[1]}'\n'
	fi

	# Throws on empty buffer
	if [[ -z $buffer ]]; then
		echo "No data to write"
		exit
	fi
fi

# Ensures buffer will exit configuration mode
buffer+='\n'

# Writes buffer to device
sleep $sleepLen; printf "$buffer" > $path &

# Reads data until configuration mode is exited
if [[ $gotRead -eq 0 ]]; then
	sed "/^Done/q" $path
# Reads data until exited
else
	cat < $path
fi
